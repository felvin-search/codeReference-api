{
  "php": {
    "caesar cipher": "\"<?php\\n\\n/**\\n * Encrypt given text using caesar cipher.\\n * @param string text text to be encrypted\\n * @param int shift number of shifts to be applied\\n * @return string new encrypted text\\n */\\nfunction encrypt(string $text, int $shift): string\\n{\\n    $encryptedText = ''; // Empty string to store encrypted text\\n    foreach (str_split($text) as $c) { // Going through each character\\n        if (ctype_alpha($c)) {\\n            $placeValue = ord($c) - ord(ctype_upper($c) ? 'A' : 'a'); // Getting value of character (i.e. 0-25)\\n            $placeValue = ($placeValue + $shift) % 26; // Applying encryption formula\\n            $placeValue += ord(ctype_upper($c) ? 'A' : 'a');\\n            $newChar = chr($placeValue); // Getting new character from new value (i.e. A-Z)\\n            $encryptedText .= $newChar; // Appending encrypted character\\n        } else {\\n            $encryptedText .= $c; // Appending the original character\\n        }\\n    }\\n\\n    return $encryptedText; // Returning encrypted text\\n}\\n\\n/**\\n * Decrypt given text using caesar cipher.\\n * @param string text text to be decrypted\\n * @param int shift number of shifts to be applied\\n * @return string new decrypted text\\n */\\nfunction decrypt(string $text, int $shift): string\\n{\\n    $decryptedText = ''; // Empty string to store decrypted text\\n    foreach (str_split($text) as $c) { // Going through each character\\n        if (ctype_alpha($c)) {\\n            $placeValue = ord($c) - ord(ctype_upper($c) ? 'A' : 'a'); // Getting value of character (i.e. 0-25)\\n            $placeValue = ($placeValue - $shift) % 26; // Applying decryption formula\\n            if ($placeValue < 0) { // Handling case where remainder is negative \\n                $placeValue += 26;\\n            }\\n            $placeValue += ord(ctype_upper($c) ? 'A' : 'a');\\n            $newChar = chr($placeValue); // Getting new character from new value (i.e. A-Z)\\n            $decryptedText .= $newChar; // Appending decrypted character\\n        } else {\\n            $decryptedText .= $c; // Appending the original character\\n        }\\n    }\\n\\n    return $decryptedText; // Returning decrypted text\\n}\\n\"",
    "xorr cipher": "\"<?php\\n// The XOR cipher is a type of additive cipher.\\n// Each character is bitwise XORed with the key.\\n// We loop through the input string, XORing each\\n// character with the key.\\nfunction xor_cipher(string $inp_string, string $key)\\n{\\n\\n    $key_len = strlen($key);\\n    $result = array();\\n\\n    for ($idx = 0;$idx < strlen($inp_string);$idx++)\\n    {\\n        array_push($result, $inp_string[$idx] ^ $key[$idx % $key_len]);\\n    }\\n\\n    return join(\\\"\\\", $result);\\n}\\n\"",
    "binary to decimal": "\"<?php\\n/**\\n * This function converts the\\n * submitted Binary Number to\\n * Decimal Number.\\n *\\n * Working of Algorithm\\n * (10) base 2\\n * (1 * (2 ^ 1) + 0 * (2 ^ 0)) base 10\\n * (2 + 0) base 10\\n * 2 base 10\\n * @param string $binaryNumber\\n * @return int\\n */\\nfunction binaryToDecimal($binaryNumber)\\n{\\n    if (!is_numeric($binaryNumber)) {\\n        throw new \\\\Exception('Please pass a valid Binary Number for Converting it to a Decimal Number.');\\n    }\\n\\n    $decimalNumber = 0;\\n    $binaryDigits  = array_reverse(str_split($binaryNumber));\\n\\n    foreach ($binaryDigits as $index => $digit) {\\n        $decimalNumber += $digit * pow(2, $index);\\n    }\\n\\n    return $decimalNumber;\\n}\\n\\n/**\\n * This function converts the\\n * submitted Decimal Number to\\n * Binary Number.\\n *\\n * @param string $decimalNumber\\n * @return string\\n */\\nfunction decimalToBinary($decimalNumber)\\n{\\n    if (!is_numeric($decimalNumber)) {\\n        throw new \\\\Exception('Please pass a valid Decimal Number for Converting it to a Binary Number.');\\n    }\\n\\n    $binaryNumber = '';\\n\\n    while ($decimalNumber > 0) {\\n        $binaryNumber = ($decimalNumber % 2) . $binaryNumber;\\n        $decimalNumber /= 2;\\n    }\\n\\n    return $binaryNumber;\\n}\\n\"",
    "hexadecimal to decimal": "\"<?php\\n/**\\n * This function converts the\\n * submitted Octal Number to\\n * Decimal Number.\\n *\\n * Working of Algorithm\\n * (AB) base 16\\n * (A * (16 ^ 1) + B * (16 ^ 0)) base 10\\n * (10 * (16 ^ 1) + 11 * (16 ^ 0)) base 10\\n * (160 + 11) base 10\\n * 171 base 10\\n * @param string $octalNumber\\n * @return int\\n */\\nfunction hexToDecimal($hexNumber)\\n{\\n    // Using ctype to check all the digits are valid hex digits or not.\\n    if (!ctype_xdigit($hexNumber)) {\\n        throw new \\\\Exception('Please pass a valid Hexadecimal Number for Converting it to a Decimal Number.');\\n    }\\n\\n    $decimalNumber = 0;\\n\\n    // Mapping for Decimal Digits after 9\\n    $decimalDigitMappings = [\\n        'A' => 10,\\n        'B' => 11,\\n        'C' => 12,\\n        'D' => 13,\\n        'E' => 14,\\n        'F' => 15,\\n    ];\\n\\n    $hexDigits = str_split($hexNumber);\\n    $hexDigits = array_reverse($hexDigits);\\n\\n    foreach ($hexDigits as $power => $digit) {\\n        $hexDigit = $digit;\\n        if (!is_numeric($digit)) {\\n            $hexDigit = $decimalDigitMappings[$digit];\\n        }\\n        $decimalNumber += (pow(16, $power) * $hexDigit);\\n    }\\n    return $decimalNumber;\\n}\\n\\n/**\\n * This function converts the\\n * submitted Decimal Number to\\n * Hexadecimal Number.\\n *\\n * @param string $decimalNumber\\n * @return string\\n */\\nfunction decimalToHex($decimalNumber)\\n{\\n    $hexDigits = [];\\n\\n    // Mapping for HexaDecimal Digits after 9\\n    $hexDigitMappings = [\\n        10 => 'A',\\n        11 => 'B',\\n        12 => 'C',\\n        13 => 'D',\\n        14 => 'E',\\n        15 => 'F',\\n    ];\\n    if (!is_numeric($decimalNumber)) {\\n        throw new \\\\Exception('Please pass a valid Decimal Number for Converting it to a Hexadecimal Number.');\\n    }\\n\\n    while ($decimalNumber > 0) {\\n        $remainder = ($decimalNumber % 16);\\n        $decimalNumber /= 16;\\n        if (empty($hexDigits) && 0 === $remainder) {\\n            continue;\\n        }\\n        $hexDigits[] = $remainder;\\n    }\\n\\n    $hexDigits = array_reverse($hexDigits);\\n\\n    foreach ($hexDigits as $index => $digit) {\\n        if ($digit > 9) {\\n            $hexDigits[$index] = $hexDigitMappings[$digit];\\n        }\\n    }\\n\\n    $hexNumber = ltrim(implode('', $hexDigits), '0'); // Connecting all the digits and removing leading zeroes.\\n\\n    return $hexNumber;\\n}\\n\"",
    "octal to decimal": "\"<?php\\n/**\\n * This function converts the\\n * submitted Octal Number to\\n * Decimal Number.\\n *\\n * Working of Algorithm\\n * (10) base 8\\n * (1 * (8 ^ 1) + 0 * (8 ^ 0)) base 10\\n * (8 + 0) base 10\\n * 9 base 10\\n * @param string $octalNumber\\n * @return int\\n */\\nfunction octalToDecimal($octalNumber)\\n{\\n    if (!is_numeric($octalNumber)) {\\n        throw new \\\\Exception('Please pass a valid Octal Number for Converting it to a Decimal Number.');\\n    }\\n\\n    $decimalNumber = 0;\\n    $octalDigits   = array_reverse(str_split($octalNumber));\\n\\n    foreach ($octalDigits as $index => $digit) {\\n        $decimalNumber += $digit * pow(8, $index);\\n    }\\n\\n    return $decimalNumber;\\n}\\n\\n/**\\n * This function converts the\\n * submitted Decimal Number to\\n * Octal Number.\\n *\\n * @param string $decimalNumber\\n * @return string\\n */\\nfunction decimalToOctal($decimalNumber)\\n{\\n    if (!is_numeric($decimalNumber)) {\\n        throw new \\\\Exception('Please pass a valid Decimal Number for Converting it to an Octal Number.');\\n    }\\n\\n    $octalNumber = '';\\n\\n    while ($decimalNumber > 0) {\\n        $octalNumber = ($decimalNumber % 8) . $octalNumber;\\n        $decimalNumber /= 8;\\n    }\\n\\n    return $octalNumber;\\n}\\n\"",
    "absolute max": "\"<?php\\n/**\\n * This function calculates\\n * Absolute max values from\\n * the different numbers\\n * provided\\n *\\n * @param decimal $numbers A variable sized number input\\n * @return decimal $absoluteMax Absolute max value\\n */\\nfunction absolute_max(...$numbers)\\n{\\n    if (empty($numbers)) {\\n        throw new \\\\Exception('Please pass values to find absolute max value');\\n    }\\n\\n    $absoluteMax = $numbers[0];\\n    for ($loopIndex = 0; $loopIndex < count($numbers); $loopIndex++) {\\n        if ($numbers[$loopIndex] > $absoluteMax) {\\n            $absoluteMax = $numbers[$loopIndex];\\n        }\\n    }\\n\\n    return $absoluteMax;\\n}\\n\"",
    "absolute min": "\"<?php\\n/**\\n * This function calculates\\n * Absolute min values from\\n * the different numbers\\n * provided.\\n *\\n * @param decimal $numbers A variable sized number input\\n * @return decimal $absoluteMin Absolute min value\\n */\\nfunction absolute_min(...$numbers)\\n{\\n    if (empty($numbers)) {\\n        throw new \\\\Exception('Please pass values to find absolute min value');\\n    }\\n\\n    $absoluteMin = $numbers[0];\\n    for ($loopIndex = 0; $loopIndex < count($numbers); $loopIndex++) {\\n        if ($numbers[$loopIndex] < $absoluteMin) {\\n            $absoluteMin = $numbers[$loopIndex];\\n        }\\n    }\\n\\n    return $absoluteMin;\\n}\\n\"",
    "check prime": "\"<?php\\n/**\\n * This function check whether\\n * the provided integer is a prime\\n * number or not.\\n *\\n * @param Integer $number An integer input\\n * @return boolean whether the number is prime or not\\n */\\nfunction isPrime(int $number)\\n{\\n    if ($number === 2) {\\n        return true;\\n    }\\n\\n    if ($number % 2 === 0 or $number < 2) {\\n        return false;\\n    }\\n\\n    $i = 3;\\n    while ($i <= sqrt($number)) {\\n        if ($number % $i === 0) {\\n            return false;\\n        }\\n        $i += 2;\\n    }\\n\\n    return true;\\n}\\n\"",
    "factorial": "\"<?php\\n/**\\n * This function calculates\\n * and returns the factorial\\n * of provided positive integer\\n * number.\\n *\\n * @param Integer $number Integer input\\n * @return Integer Factorial of the input\\n */\\nfunction factorial(int $number)\\n{\\n    if ($number < 0) {\\n        throw new \\\\Exception(\\\"Negative numbers are not allowed for calculating Factorial\\\");\\n    }\\n    if ($number === 0) {\\n        return 1; // Factorial of 0 is 1\\n    }\\n    return ($number * factorial($number - 1)); // Recursion since x! = x * (x-1)!\\n}\\n\"",
    "fast exponentiation": "\"<?php\\n/**\\n * This functions computes an exponent by doing repeated squares\\n *\\n * @param Integer $base the base\\n * @param Integer $exponent the exponent (ie the number of times that the base is multiplied by itself)\\n * @return Integer\\n */\\nfunction fastExponentiation(int $base, int $exponent)\\n{\\n    if ($exponent == 0) {\\n\\t\\treturn 1;\\n\\t}   \\n\\n\\tif ($exponent == 1) {\\n\\t\\treturn $base;\\n\\t}\\n\\n\\tif ($exponent % 2 == 0) {\\n\\t\\treturn fastExponentiation($base*$base, $exponent/2);\\n\\t} else {\\n\\t\\treturn $base * fastExponentiation($base*$base, ($exponent-1)/2);\\n\\t}\\n}\\n\"",
    "fibonacci": "\"<?php\\n\\n/*\\n * Run script and test execution time with following script\\n        $executionTime = New ExecutionTime();\\n        print_r(fibonacciRecursive(10));\\n */\\n\\nclass ExecutionTime\\n{\\n    private $start_time = 0;\\n    private $end_time = 0;\\n    private $execution_time = 0;\\n\\n    public function __construct()\\n    {\\n        $this->start_time = microtime(true);\\n    }\\n\\n    public function __destruct()\\n    {\\n        $this->end_time = microtime(true);\\n        $this->execution_time = $this->end_time - $this->start_time;\\n        echo \\\"Executed in $this->execution_time seconds\\\\n\\\";\\n    }\\n}\\n\\nfunction fibonacciRecursive(int $num)\\n{\\n    /*\\n     * Fibonacci series using recursive approach\\n     */\\n\\n    $fibonacciRecursive = [];\\n    for ($i = 0; $i < $num; $i++) {\\n        array_push($fibonacciRecursive, recursive($i));\\n    }\\n    return $fibonacciRecursive;\\n}\\n\\nfunction recursive(int $num)\\n{\\n    if ($num < 0) {\\n        throw new \\\\Exception(\\\"Number must be greater than 0.\\\");\\n    } else {\\n        if ($num == 0 || $num == 1) {\\n            return $num;\\n        } else {\\n            return recursive($num - 1) + recursive($num - 2);\\n        }\\n    }\\n}\\n\\nfunction fibonacciWithBinetFormula(int $num)\\n{\\n    /*\\n     * Fibonacci series using Binet's formula given below\\n     * binet's formula =  ((1 + sqrt(5) / 2 ) ^ n - (1 - sqrt(5) / 2 ) ^ n ) ) / sqrt(5)\\n     * More about Binet's formula found at http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html#section1\\n     */\\n\\n    $fib_series = [];\\n\\n    if ($num < 0) {\\n        throw new \\\\Exception(\\\"Number must be greater than 0.\\\");\\n    } else {\\n        $sqrt = sqrt(5);\\n        $phi_1 = (1 + $sqrt) / 2;\\n        $phi_2 = (1 - $sqrt) / 2;\\n\\n        foreach (range(0, $num - 1) as $n) {\\n            $seriesNumber = (pow($phi_1, $n) - pow($phi_2, $n)) / $sqrt;\\n            array_push($fib_series, (int)$seriesNumber);\\n        }\\n\\n    }\\n\\n    return $fib_series;\\n}\"",
    "fibonacci2": "\"<?php\\n\\n/*\\n * Print Fibocanni sequence using a generator\\n */\\n\\n /**\\n  * @param int $i number of Fibonacci numbers to generate\\n  * @param Generator $set Fibonacci calculator\\n  */\\nfunction loop($i, Generator $set)\\n{\\n    while($i-- > 0 && $set->valid())\\n    {\\n        yield $set->current();\\n        $set->next();\\n    }\\n}\\n\\n/*\\n * Fibonacci generator\\n */\\nfunction fib()\\n{\\n    yield $i = 0;\\n    yield $j = 1;\\n\\n    while(true)\\n    {\\n        yield $k = $i + $j;\\n        $i = $j;\\n        $j = $k;\\n    }\\n}\\n\\n/*\\n * Generate 100 Fibonacci numbers\\n */\\nforeach(loop(100, fib()) as $item)\\n{\\n    print($item.',');\\n}\"",
    "perfect square": "\"<?php\\n/**\\n * This function check whether\\n * the provided number is a\\n * perfect square or not.\\n *\\n * @param Decimal $number A decimal input\\n * @return boolean whether the number is perfect square or not\\n */\\nfunction is_perfect_square($number)\\n{\\n    $root = (int) sqrt($number);\\n    return (($root * $root) === $number); // If number's square root is an integer then it's a perfect square else not\\n}\\n\"",
    "binary search": "\"<?php\\nfunction binarySearchIterative($list, $target)\\n{\\n  /*\\n   * Binary search algorithm in PHP\\n   *\\n   * Be careful collection must be ascending sorted, otherwise result will be unpredictable\\n   *\\n   * @param Array $list a sorted array list of integers to search\\n   * @param integer $target an integer number to search for in the list\\n   * @return integer the index where the target is found (or null if not found)\\n   *\\n   * Examples:\\n   * binarySearchIterative([0, 5, 7, 10, 15], 0);\\n   * 0\\n   * binarySearchIterative([0, 5, 7, 10, 15], 15);\\n   * 4\\n   * binarySearchIterative([0, 5, 7, 10, 15], 5);\\n   * 1\\n   * binarySearchIterative([0, 5, 7, 10, 15], 6);\\n   *\\n   */\\n    $first = 0;\\n    $last = count($list)-1;\\n\\n\\n    while ($first <= $last) {\\n        $mid = ($first + $last) >> 1;\\n\\n\\n        if ($list[$mid] == $target) {\\n            return $mid;\\n        } elseif ($list[$mid] > $target) {\\n            $last = $mid - 1;\\n        } elseif ($list[$mid] < $target) {\\n            $first = $mid + 1;\\n        }\\n    }\\n\\n    return null;\\n}\\n\\nfunction binarySearchByRecursion($list, $target, $start, $end)\\n{\\n  /*\\n   * Binary search algorithm in PHP by recursion\\n   *\\n   * Be careful collection must be ascending sorted, otherwise result will be unpredictable\\n   *\\n   * @param Array $list a sorted array list of integers to search\\n   * @param integer $target an integer number to search for in the list\\n   * @param integer $start an integer number where to start searching in the list\\n   * @param integer $end an integer number where to end searching in the list\\n   * @return integer the index where the target is found (or null if not found)\\n   *\\n   * Examples:\\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 0, 0, 4);\\n   * 0\\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 15, 0, 4);\\n   * 4\\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 5, 0, 4);\\n   * 1\\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 6, 0, 4);\\n   *\\n   */\\n    if ($start > $end)\\n        return null;\\n\\n\\n    $mid = ($start + $end) >> 1;\\n\\n\\n    if ($list[$mid] == $target) {\\n        return $mid;\\n    } elseif ($list[$mid] > $target) {\\n        return binarySearchByRecursion($list, $target, $start, $mid-1);\\n    } elseif ($list[$mid] < $target) {\\n        return binarySearchByRecursion($list, $target, $mid+1, $end);\\n    }\\n\\n    return null;\\n}\\n\\n\\nassert(binarySearchIterative([0, 5, 7, 10, 15], 0) == 0);\\nassert(binarySearchIterative([0, 5, 7, 10, 15], 7) == 2);\\nassert(binarySearchIterative([0, 5, 7, 10, 15], 8) == null);\\n\\nassert(binarySearchByRecursion([0, 5, 7, 10, 15], 0, 0, 4) == 0);\\nassert(binarySearchByRecursion([0, 5, 7, 10, 15], 15, 0, 4) == 4);\\nassert(binarySearchByRecursion([0, 5, 7, 10, 15], 7, 0, 4) == 2);\\nassert(binarySearchByRecursion([0, 5, 7, 10, 15], 6, 0, 4) == null);\\n\"",
    "fibonacci search": "\"<?php\\n\\n/*\\n * Function to find nth number in Fibonaccu sequence.\\n * Uses a version of memoization and runs very fast!\\n */\\n\\n/**\\n * @param int $n position to check\\n * @param array $m array to store solved trees\\n */\\nfunction fibonacciPosition(int $n, array &$m = [])\\n{\\n    if(isset($m[$n])) return $m[$n];\\n    if($n < 2) return $n;\\n\\n    $m[$n] = fibonacciPosition($n - 1, $m) + fibonacciPosition($n - 2, $m);\\n\\n    return $m[$n];\\n\\n}\\n\\nprint fibonacciPosition(59);\\n\"",
    "linear search": "\"<?php\\n\\n/**\\n * Linear search in PHP\\n * \\n * Reference: https://www.geeksforgeeks.org/linear-search/\\n * \\n * @param Array $list a array of integers to search\\n * @param integer $target an integer number to search for in the list\\n * @return integer the index where the target is found (or -1 if not found)\\n * \\n * Examples:\\n * \\n *  data =  5, 7, 8, 11, 12, 15, 17, 18, 20\\n *  \\n *  x = 15\\n *  Element found at position 6\\n *  \\n *  x = 1\\n *  Element not found\\n * \\n **/\\n\\n\\nfunction linear_search($list, $target) #Linear Search\\n  { $n = sizeof($list); \\n    for($i = 0; $i < $n; $i++) \\n    { \\n        if($list[$i] == $target) \\n            return $i+1; \\n    } \\n    return -1; \\n   }\\n   \\n# DRIVER CODE\\n$data = array(5, 7, 8, 11, 12, 15, 17, 18, 20);  \\n$x = 15; \\n\\n\\n$result = linear_search($data, $x); # OUTPUT DISPLAY\\nif($result == -1) \\n    echo \\\"Element not found\\\"; \\nelse\\n    echo \\\"Element found at position \\\" , $result; \\n\\n?>\\n\"",
    "lower bound": "\"<?php\\n\\n/**\\n * @param an array of integers\\n * @return is array sorted in ascending\\n */\\nfunction array_check(array $arr): void{\\n    $len = count($arr);\\n    if($len == 0){\\n        return;\\n    }\\n    if(!is_int($arr[0])){\\n        throw UnexpectedValueException;\\n    }\\n    for($i = 1; $i < $len; $i++){\\n        // a sorted array is expected\\n        if(!is_int($arr[$i]) && $arr[$i] < $arr[$i-1]){\\n           throw UnexpectedValueException;\\n        }\\n    }\\n}\\n\\n\\n/**\\n * Lower Bound of an element is minimum index that an element would be placed \\n * if it is added into that sorted array\\n * \\n * [C++ Lower Bound](http://www.cplusplus.com/reference/algorithm/lower_bound/)\\n * \\n * It is assumed that an integer array is provided\\n * and the second parameter is also a integer\\n * \\n * @param array of integers\\n * @param integer whose lower bound is to be found\\n * \\n * @return the index of lower bound of the given element\\n */\\nfunction lower_bound(array $arr, int $elem){\\n    // array must be sorted\\n    // and all elemets must be integers\\n    array_check($arr);\\n    $hi = count($arr);\\n    $lo = 0;\\n    while($lo < $hi){\\n        $mid = $lo + floor(($hi - $lo)/2);\\n        if($arr[$mid] < $elem){\\n            $lo = $mid+1;\\n        }else{\\n            $hi = $mid;\\n        }\\n    }\\n    return $lo;\\n}\\n\\n// test code\\n$arr = array(1,2,3,3,3,4,5);\\n$i = lower_bound($arr, 3);\\nprint $i;\"",
    "upper bound": "\"<?php\\n\\n/**\\n * @param an array of integers\\n * @return is array sorted in ascending\\n */\\nfunction array_check(array $arr): void{\\n    $len = count($arr);\\n    if($len == 0){\\n        return;\\n    }\\n    if(!is_int($arr[0])){\\n        throw UnexpectedValueException;\\n    }\\n    for($i = 1; $i < $len; $i++){\\n        // a sorted array is expected\\n        if(!is_int($arr[$i]) && $arr[$i] < $arr[$i-1]){\\n           throw UnexpectedValueException;\\n        }\\n    }\\n}\\n\\n/**\\n * Upper Bound of an element is maximum index that an element would be placed \\n * if it is added into that sorted array\\n * \\n * [C++ Lower Bound](http://www.cplusplus.com/reference/algorithm/upper_bound/)\\n * \\n * It is assumed that an integer array is provided\\n * and the second parameter is also a integer\\n * \\n * @param array of integers\\n * @param integer whose upper bound is to be found\\n * \\n * @return the index of upper bound of the given element\\n */\\nfunction upper_bound(array $arr, int $elem){\\n    // array must be sorted\\n    // and all elemets must be integers\\n    array_check($arr);\\n    $hi = count($arr);\\n    $lo = 0;\\n    while($lo < $hi){\\n        $mid = $lo + floor(($hi - $lo)/2);\\n        if($arr[$mid] <= $elem){\\n            $lo = $mid + 1;\\n        }else{\\n            $hi = $mid;\\n        }\\n    }\\n    return $lo;\\n}\\n\\n// test code\\n$arr = array(1,2,3,3,3,4,5);\\n$i = upper_bound($arr, 3);\\nprint $i;\"",
    "bubble sort": "\"<?php\\n\\n\\nfunction bubbleSort($array) {\\n    $length=count($array);\\n    for ($i=$length;$i>0;$i--){\\n        $swape=true;\\n        for ($j=0;$j<$i-1;$j++){\\n            if ($array[$j]>$array[$j+1]){\\n                $temp=$array[$j];\\n                $array[$j]=$array[$j+1];\\n                $array[$j+1]=$temp;\\n                $swape=false;\\n            }\\n        }\\n        if ($swape)break;\\n    }\\n\\n    return $array;\\n}\\n\\n\\n\"",
    "bubble sort2": "\"<?php\\n/*\\n * Bubble Sort\\n * Compare numbers in an array 2 at a time and switch them if the second number is smaller \\n */\\n\\n/**\\n * @param array $input array of random numbers\\n */\\nfunction bubbleSort(array $input)\\n{\\n    /* Return nothing if input is empty */\\n    if(!isset($input))\\n    {\\n        return [];\\n    }\\n\\n    do\\n    {\\n        $swapped = false;\\n\\n        for($i = 0, $count = sizeof($input) - 1; $i < $count; $i++)\\n        {\\n            if($input[$i + 1] < $input[$i])\\n            {\\n                list($input[$i + 1], $input[$i]) = [$input[$i], $input[$i + 1]];\\n                $swapped = true;\\n            }\\n        }\\n    }\\n    while($swapped);\\n\\n    return $input;\\n}\\n\\n/*\\n * Test bubbleSort\\n */\\n$array = [51158,1856,8459,67957,59748,58213,90876,39621,66570,64204,79935,27892,47615,94706,34201,74474,63968,4337,43688,42685,31577,5239,25385,56301,94083,23232,67025,44044,74813,34671,90235,65764,49709,12440,21165,20620,38265,12973,25236,93144,13720,4204,77026,42348,19756,97222,78828,73437,48208,69858,19713,29411,49809,66174,5257,43340,40565,9592,52328,16677,38386,55416,99519,13732,84076,52905,47662,31805,46184,2811,35374,50800,53635,51886,49052,75197,3720,75045,28309,63771,71526,16122,36625,44654,86814,98845,44637,54955,24714,81960,78095,49048,99711,272,45755,31919,8181,1392,15352,82656,27760,18362,43780,50209,51433,2847,62310,87450,22874,40789,56841,52928,5523,76474,8935,63245,16387,21746,47596,84402,49168,58223,26993,55908,92837,64208,86309,30819,83638,9508,44628,10786,68125,14123,70474,50596,44518,74872,61968,36828,17860,4605,68756,86070,52068,51830,56992,45799,42422,68514,92559,40206,31263,71774,14202,94807,25774,15003,54211,18708,32074,43836,48964,40742,26281,67338,75786,34925,34649,45519,72472,80188,40858,83246,92215,66178,67452,86198,82300,45894,97156,73907,31159,7018,55549,35245,68975,88246,14098,59973,7762,40459,86358,63178,47489,55515,79488,46528,99272,10867,75190,56963,5520,56494,42310,40171,78105,29724,30110,28493,36141,22479,85799,70466,92106,16868,57402,4813,47432,24689,78533,97577,32178,30258,82785,56063,76277,96407,77849,1807,45344,30298,18158,49935,90728,22192,36852,33982,66206,30948,40372,33446,99156,28651,61591,79028,1689,94257,32158,11122,81097,57981,26277,7515,7873,8350,28229,24105,76818,86897,18456,29373,7853,24932,93070,4696,63015,9358,28302,3938,11754,33679,18492,91503,63395,12029,23954,27230,58336,16544,23606,61349,37348,78629,96145,57954,32392,76201,54616,59992,5676,97799,47910,98758,75043,72849,6466,68831,2246,69091,22296,6506,93729,86968,39583,46186,96782,19074,46574,46704,99211,55295,33963,77977,86805,72686];\\n\\n$array = bubbleSort($array);\\necho implode(',', $array);\"",
    "count sort": "\"<?php\\n\\n\\n/**\\n * @param $array\\n * @param $min\\n * @param $max\\n * @return mixed\\n */\\nfunction countSort($array, $min, $max)\\n{\\n    $count = array();\\n    for($i = $min; $i <= $max; $i++)\\n    {\\n        $count[$i] = 0;\\n    }\\n\\n    foreach($array as $number)\\n    {\\n        $count[$number]++;\\n    }\\n    $z = 0;\\n    for($i = $min; $i <= $max; $i++) {\\n        while( $count[$i]-- > 0 ) {\\n            $array[$z++] = $i;\\n        }\\n    }\\n    return $array;\\n}\\n\"",
    "insertion sort": "\"<?php\\n//works perfectly if your array nearly sorted\\nfunction insertionSort(array $array){\\n\\n    for ($i=1;$i<count($array);$i++){\\n        $currentVal=$array[$i];\\n        for ($j=$i-1;$j>=0&&$array[$j]>$currentVal;$j--){\\n          $array[$j+1]=$array[$j];\\n        }\\n        $array[$j+1]=$currentVal;\\n    }\\n    return $array;\\n}\\n\\n\\n\"",
    "merge sort": "\"<?php\\n\\nfunction merge(array $arr1,array $arr2){\\n    $result=[];\\n    $i=0;\\n    $j=0;\\n    while ($i<count($arr1)&&$j<count($arr2)){\\n        if ($arr2[$j]>$arr1[$i]){\\n            $result[]=$arr1[$i];\\n            $i++;\\n        }else{\\n            $result[]=$arr2[$j];\\n            $j++;\\n        }\\n    }\\n    while ($i<count($arr1)){\\n        $result[]=$arr1[$i];\\n        $i++;\\n    }\\n    while ($j<count($arr2)){\\n        $result[]=$arr2[$j];\\n        $j++;\\n    }\\n\\n    return $result;\\n\\n}\\n\\n\\n\\n\\n\\nfunction mergeSort(array $arr){\\n    if (count($arr)<=1)return $arr;\\n    $mid=floor(count($arr)/2);\\n    $left=mergeSort(array_slice($arr,0,$mid));\\n    $right=mergeSort(array_slice($arr,$mid));\\n\\n    return merge($left,$right);\\n\\n\\n}\\n\\n\\n\"",
    "quick sort": "\"<?php\\n/*\\n * Quick Sort\\n * Compare number in an array to the next number and sets to new array (greater than or less than)\\n */\\n\\n/**\\n * @param array $input array of random numbers\\n */\\nfunction quickSort(array $input)\\n{\\n    /* Return nothing if input is empty */\\n    if(!isset($input))\\n    {\\n        return [];\\n    }\\n\\n    $lt = [];\\n    $gt = [];\\n\\n    if(sizeof($input) < 2)\\n    {\\n        return $input;\\n    }\\n\\n    $key = key($input);\\n    $shift = array_shift($input);\\n\\n    foreach($input as $value)\\n    {\\n        $value <= $shift ? $lt[] = $value : $gt[] = $value;\\n    }\\n\\n    return array_merge(quickSort($lt), [$key => $shift], quickSort($gt));\\n}\\n\\n/*\\n * Test quickSort\\n */\\n$array = [51158,1856,8459,67957,59748,58213,90876,39621,66570,64204,79935,27892,47615,94706,34201,74474,63968,4337,43688,42685,31577,5239,25385,56301,94083,23232,67025,44044,74813,34671,90235,65764,49709,12440,21165,20620,38265,12973,25236,93144,13720,4204,77026,42348,19756,97222,78828,73437,48208,69858,19713,29411,49809,66174,5257,43340,40565,9592,52328,16677,38386,55416,99519,13732,84076,52905,47662,31805,46184,2811,35374,50800,53635,51886,49052,75197,3720,75045,28309,63771,71526,16122,36625,44654,86814,98845,44637,54955,24714,81960,78095,49048,99711,272,45755,31919,8181,1392,15352,82656,27760,18362,43780,50209,51433,2847,62310,87450,22874,40789,56841,52928,5523,76474,8935,63245,16387,21746,47596,84402,49168,58223,26993,55908,92837,64208,86309,30819,83638,9508,44628,10786,68125,14123,70474,50596,44518,74872,61968,36828,17860,4605,68756,86070,52068,51830,56992,45799,42422,68514,92559,40206,31263,71774,14202,94807,25774,15003,54211,18708,32074,43836,48964,40742,26281,67338,75786,34925,34649,45519,72472,80188,40858,83246,92215,66178,67452,86198,82300,45894,97156,73907,31159,7018,55549,35245,68975,88246,14098,59973,7762,40459,86358,63178,47489,55515,79488,46528,99272,10867,75190,56963,5520,56494,42310,40171,78105,29724,30110,28493,36141,22479,85799,70466,92106,16868,57402,4813,47432,24689,78533,97577,32178,30258,82785,56063,76277,96407,77849,1807,45344,30298,18158,49935,90728,22192,36852,33982,66206,30948,40372,33446,99156,28651,61591,79028,1689,94257,32158,11122,81097,57981,26277,7515,7873,8350,28229,24105,76818,86897,18456,29373,7853,24932,93070,4696,63015,9358,28302,3938,11754,33679,18492,91503,63395,12029,23954,27230,58336,16544,23606,61349,37348,78629,96145,57954,32392,76201,54616,59992,5676,97799,47910,98758,75043,72849,6466,68831,2246,69091,22296,6506,93729,86968,39583,46186,96782,19074,46574,46704,99211,55295,33963,77977,86805,72686];\\n\\n$array = quickSort($array);\\necho implode(',', $array);\"",
    "radix sort": "\"<?php\\n\\n//get the digits value by it's place\\nfunction getDigit($num,$i){\\n    return floor(abs($num) /pow(10,$i))%10;\\n}\\n\\nfunction digitsCount($num){\\n    if ($num==0)return 1;\\n    return floor(log10(abs($num)))+1;\\n}\\n\\n\\nfunction maxDigits($arr){\\n    $maxDigits=0;\\n    for ($i=0;$i<count($arr);$i++){\\n        $maxDigits=max($maxDigits,digitsCount($arr[$i]));\\n    }\\n    return $maxDigits;\\n}\\n\\n\\nfunction radixSort($nums){\\n    $maxDigitsCount=maxDigits($nums);\\n    for ($k=0;$k<$maxDigitsCount;$k++){\\n        $digitBucket=array_fill(0,10,[]);\\n\\n        for ($i=0;$i<count($nums);$i++){\\n            $digitBucket[getDigit($nums[$i],$k)][]=$nums[$i];\\n        }\\n\\n\\n        $nums=  concat($digitBucket);\\n\\n\\n    }\\n\\n    return $nums;\\n}\\n\\n\\n\\n\\n\\nfunction concat(array $array) {\\n    $newArray=[];\\n    for ($i=0;$i<count($array);$i++){\\n        for ($j=0;$j<count($array[$i]);$j++){\\n            $newArray[]=$array[$i][$j];\\n        }\\n    }\\n    return $newArray;\\n}\\n\\n\\n\\n\\n\\n\"",
    "selection sort": "\"<?php\\n\\nfunction selectionSorting($array){\\n    $length=count($array);\\n    for ($i=0;$i<$length;$i++){\\n        $lowest=$i;\\n        for ($j=$i+1;$j<$length;$j++){\\n            if ($array[$j] < $array[$lowest]){\\n                $lowest=$j;\\n            }\\n        }\\n        if ($i !==$lowest){\\n            $temp=$array[$i];\\n            $array[$i]=$array[$lowest];\\n            $array[$lowest]=$temp;\\n        }\\n\\n    }\\n    return $array;\\n}\\n\"",
    "check anagram": "\"<?php\\n\\nfunction isAnagram(string $originalString, string $testString, bool $caseInsensitive = true)\\n{\\n    if ($caseInsensitive) \\n    {\\n        $originalString = strtolower($originalString); // Converting string to lowercase for case-insensitive check\\n        $testString = strtolower($testString);\\n    }\\n\\n    //count_chars(string, mode = 1) returns key-value pairs with character as key, frequency as value\\n    //We can directly compare the arrays in this case\\n    if (count_chars($originalString, 1) == count_chars($testString, 1))\\n    {\\n        return true;\\n    }\\n    else\\n    {\\n        return false;\\n    }\\n}\"",
    "check palindrome": "\"<?php\\n\\nfunction is_palindrome(string $string, bool $caseInsensitive = true)\\n{\\n    $string = trim($string); // Removing leading and trailing spaces\\n\\n    if (empty($string)) {\\n        return false; // Returning false for an Empty String\\n    }\\n\\n    if ($caseInsensitive) {\\n        $string = strtolower($string); // Converting string to lowercase for case-insensitive check\\n    }\\n\\n    $characters = str_split($string);\\n\\n    for ($i = 0; $i < count($characters); $i++) {\\n        if ($characters[$i] !== $characters[count($characters) - ($i + 1)]) {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n\"",
    "count vowels": "\"<?php\\n/**\\n * This function returns\\n * the Total no. of vowels\\n * present in the given\\n * string using a simple\\n * method of looping\\n * through all the\\n * characters present in\\n * the string.\\n *\\n * @param string $string\\n * @return int   $noOfVowels\\n */\\nfunction countVowelsSimple(string $string)\\n{\\n    if (empty($string)) {\\n        throw new \\\\Exception('Please pass a non-empty string value');\\n    }\\n\\n    $noOfVowels = 0;\\n    $vowels     = ['a', 'e', 'i', 'o', 'u']; // Vowels Set\\n    $string     = strtolower($string); // For case-insensitive checking\\n    $characters = str_split($string); // Splitting the string to a Character Array.\\n\\n    foreach ($characters as $character) {\\n        if (in_array($character, $vowels)) {\\n            $noOfVowels++;\\n        }\\n    }\\n\\n    return $noOfVowels;\\n}\\n\\n/**\\n * This function returns\\n * the Total no. of vowels\\n * present in the given\\n * string using a\\n * regular expression.\\n *\\n * @param string $string\\n * @return int\\n */\\nfunction countVowelsRegex(string $string)\\n{\\n    if (empty($string)) {\\n        throw new \\\\Exception('Please pass a non-empty string value');\\n    }\\n    $string = strtolower($string); // For case-insensitive checking\\n\\n    return preg_match_all('/[a,e,i,o,u]/', $string);\\n}\\n\"",
    "edit distance": "\"<?php\\n/**\\n * Edit distance (Levenshtein distance).\\n * Compute the difference between two sequences, ie, the minimum number of changes\\n * to get to $str2 from $str1\\n * @param string $str1\\n * @param string $str2\\n * @return int the minimum number of changes to transform one string into another\\n */\\nfunction editDistance($str1, $str2)\\n{\\n    $lenStr1 = strlen($str1);\\n    $lenStr2 = strlen($str2);\\n\\n    if ($lenStr1 == 0) {\\n        return $lenStr2;\\n    }\\n\\n    if ($lenStr2 == 0) {\\n        return $lenStr1;\\n    }\\n\\n    $distanceVectorInit = [];\\n    $distanceVectorFinal = [];\\n    for ($i = 0; $i < $lenStr1 + 1; $i++) {\\n        $distanceVectorInit[] = 0;\\n        $distanceVectorFinal[] = 0;\\n    }\\n\\n    for ($i = 0; $i < $lenStr1 + 1; $i++) {\\n        $distanceVectorInit[$i] = $i;\\n    }\\n\\n    for ($i = 0; $i < $lenStr2; $i++) {\\n        $distanceVectorFinal[0] = $i + 1;\\n        // use formula to fill in the rest of the row\\n        for ($j = 0; $j < $lenStr1; $j++) {\\n            $substitutionCost = 0;\\n            if ($str1[$j] == $str2[$i]) {\\n                $substitutionCost = $distanceVectorInit[$j];\\n            } else {\\n                $substitutionCost = $distanceVectorInit[$j] + 1;\\n            }\\n\\n            $distanceVectorFinal[$j+1] = min($distanceVectorInit[$j+1] + 1, min($distanceVectorFinal[$j] + 1, $substitutionCost));\\n        }\\n\\n        $distanceVectorInit = $distanceVectorFinal;\\n    }\\n\\n\\n    return $distanceVectorFinal[$lenStr1];\\n}\"",
    "max character": "\"<?php\\n/**\\n * This function returns\\n * the character which is\\n * repeated maximum no. of\\n * times in the given string.\\n *\\n * @param string $string\\n * @return string\\n */\\nfunction maxCharacter(string $string)\\n{\\n    if (empty($string)) {\\n        throw new \\\\Exception('Please pass a non-empty string value');\\n    }\\n\\n    $characterCountTable = []; // A variable to maintain the character counts\\n    $string              = strtolower($string); // For case-insensitive checking\\n    $characters          = str_split($string); // Splitting the string to a Character Array.\\n\\n    foreach ($characters as $character) {\\n        $currentCharacterCount = 1;\\n        if (isset($characterCountTable[$character])) {\\n            $currentCharacterCount = $characterCountTable[$character] + 1;\\n        }\\n        $characterCountTable[$character] = $currentCharacterCount;\\n    }\\n\\n    arsort($characterCountTable);\\n\\n    return array_keys($characterCountTable)[0];\\n}\\n\"",
    "reverse string": "\"<?php\\n\\nfunction reverse_string(string $string)\\n{\\n    $string = trim($string); // Removing leading and trailing spaces\\n\\n    $characters = str_split($string);\\n\\n    $reversedCharacters = [];\\n\\n    for ($i = (count($characters) - 1); $i >= 0; $i--) {\\n        $reversedCharacters[] = $characters[$i];\\n    }\\n\\n    return implode('', $reversedCharacters);\\n}\\n\"",
    "reverse words": "\"<?php\\n\\nfunction reverse_words(string $text)\\n{\\n    $text          = trim($text);\\n    $words         = explode(' ', $text);\\n    $reversedWords = [];\\n    for ($i = (count($words) - 1); $i >= 0; $i--) {\\n        $reversedWords[] = $words[$i];\\n    }\\n    return implode(' ', $reversedWords);\\n}\\n\""
  }
}
